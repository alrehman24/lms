{
    "sourceFile": "config/auth.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1750188769863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750188780476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,11 +38,11 @@\n     'guards' => [\n         'web' => [\n             'driver' => 'session',\n             'provider' => 'users',\n-        ],'web' => [\n+        ],'admin' => [\n             'driver' => 'session',\n-            'provider' => 'users',\n+            'provider' => 'admins',\n         ],\n     ],\n \n     /*\n"
                },
                {
                    "date": 1750188801969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,12 @@\n         'users' => [\n             'driver' => 'eloquent',\n             'model' => env('AUTH_MODEL', App\\Models\\User::class),\n         ],\n-\n+        'users' => [\n+            'driver' => 'eloquent',\n+            'model' => env('AUTH_MODEL', App\\Models\\User::class),\n+        ],\n         // 'users' => [\n         //     'driver' => 'database',\n         //     'table' => 'users',\n         // ],\n"
                },
                {
                    "date": 1750188813225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,121 @@\n+<?php\n+\n+return [\n+\n+    /*\n+    |--------------------------------------------------------------------------\n+    | Authentication Defaults\n+    |--------------------------------------------------------------------------\n+    |\n+    | This option defines the default authentication \"guard\" and password\n+    | reset \"broker\" for your application. You may change these values\n+    | as required, but they're a perfect start for most applications.\n+    |\n+    */\n+\n+    'defaults' => [\n+        'guard' => env('AUTH_GUARD', 'web'),\n+        'passwords' => env('AUTH_PASSWORD_BROKER', 'users'),\n+    ],\n+\n+    /*\n+    |--------------------------------------------------------------------------\n+    | Authentication Guards\n+    |--------------------------------------------------------------------------\n+    |\n+    | Next, you may define every authentication guard for your application.\n+    | Of course, a great default configuration has been defined for you\n+    | which utilizes session storage plus the Eloquent user provider.\n+    |\n+    | All authentication guards have a user provider, which defines how the\n+    | users are actually retrieved out of your database or other storage\n+    | system used by the application. Typically, Eloquent is utilized.\n+    |\n+    | Supported: \"session\"\n+    |\n+    */\n+\n+    'guards' => [\n+        'web' => [\n+            'driver' => 'session',\n+            'provider' => 'users',\n+        ],'admin' => [\n+            'driver' => 'session',\n+            'provider' => 'admins',\n+        ],\n+    ],\n+\n+    /*\n+    |--------------------------------------------------------------------------\n+    | User Providers\n+    |--------------------------------------------------------------------------\n+    |\n+    | All authentication guards have a user provider, which defines how the\n+    | users are actually retrieved out of your database or other storage\n+    | system used by the application. Typically, Eloquent is utilized.\n+    |\n+    | If you have multiple user tables or models you may configure multiple\n+    | providers to represent the model / table. These providers may then\n+    | be assigned to any extra authentication guards you have defined.\n+    |\n+    | Supported: \"database\", \"eloquent\"\n+    |\n+    */\n+\n+    'providers' => [\n+        'users' => [\n+            'driver' => 'eloquent',\n+            'model' => env('AUTH_MODEL', App\\Models\\User::class),\n+        ],\n+        'admins' => [\n+            'driver' => 'eloquent',\n+            'model' => env('AUTH_MODEL', App\\Models\\User::class),\n+        ],\n+        // 'users' => [\n+        //     'driver' => 'database',\n+        //     'table' => 'users',\n+        // ],\n+    ],\n+\n+    /*\n+    |--------------------------------------------------------------------------\n+    | Resetting Passwords\n+    |--------------------------------------------------------------------------\n+    |\n+    | These configuration options specify the behavior of Laravel's password\n+    | reset functionality, including the table utilized for token storage\n+    | and the user provider that is invoked to actually retrieve users.\n+    |\n+    | The expiry time is the number of minutes that each reset token will be\n+    | considered valid. This security feature keeps tokens short-lived so\n+    | they have less time to be guessed. You may change this as needed.\n+    |\n+    | The throttle setting is the number of seconds a user must wait before\n+    | generating more password reset tokens. This prevents the user from\n+    | quickly generating a very large amount of password reset tokens.\n+    |\n+    */\n+\n+    'passwords' => [\n+        'users' => [\n+            'provider' => 'users',\n+            'table' => env('AUTH_PASSWORD_RESET_TOKEN_TABLE', 'password_reset_tokens'),\n+            'expire' => 60,\n+            'throttle' => 60,\n+        ],\n+    ],\n+\n+    /*\n+    |--------------------------------------------------------------------------\n+    | Password Confirmation Timeout\n+    |--------------------------------------------------------------------------\n+    |\n+    | Here you may define the amount of seconds before a password confirmation\n+    | window expires and users are asked to re-enter their password via the\n+    | confirmation screen. By default, the timeout lasts for three hours.\n+    |\n+    */\n+\n+    'password_timeout' => env('AUTH_PASSWORD_TIMEOUT', 10800),\n+\n+];\n"
                },
                {
                    "date": 1750587134569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,121 @@\n+<?php\n+\n+return [\n+\n+    /*\n+    |--------------------------------------------------------------------------\n+    | Authentication Defaults\n+    |--------------------------------------------------------------------------\n+    |\n+    | This option defines the default authentication \"guard\" and password\n+    | reset \"broker\" for your application. You may change these values\n+    | as required, but they're a perfect start for most applications.\n+    |\n+    */\n+\n+    'defaults' => [\n+        'guard' => env('AUTH_GUARD', 'web'),\n+        'passwords' => env('AUTH_PASSWORD_BROKER', 'users'),\n+    ],\n+\n+    /*\n+    |--------------------------------------------------------------------------\n+    | Authentication Guards\n+    |--------------------------------------------------------------------------\n+    |\n+    | Next, you may define every authentication guard for your application.\n+    | Of course, a great default configuration has been defined for you\n+    | which utilizes session storage plus the Eloquent user provider.\n+    |\n+    | All authentication guards have a user provider, which defines how the\n+    | users are actually retrieved out of your database or other storage\n+    | system used by the application. Typically, Eloquent is utilized.\n+    |\n+    | Supported: \"session\"\n+    |\n+    */\n+\n+    'guards' => [\n+        'web' => [\n+            'driver' => 'session',\n+            'provider' => 'users',\n+        ],'admin' => [\n+            'driver' => 'session',\n+            'provider' => 'admins',\n+        ],\n+    ],\n+\n+    /*\n+    |--------------------------------------------------------------------------\n+    | User Providers\n+    |--------------------------------------------------------------------------\n+    |\n+    | All authentication guards have a user provider, which defines how the\n+    | users are actually retrieved out of your database or other storage\n+    | system used by the application. Typically, Eloquent is utilized.\n+    |\n+    | If you have multiple user tables or models you may configure multiple\n+    | providers to represent the model / table. These providers may then\n+    | be assigned to any extra authentication guards you have defined.\n+    |\n+    | Supported: \"database\", \"eloquent\"\n+    |\n+    */\n+\n+    'providers' => [\n+        'users' => [\n+            'driver' => 'eloquent',\n+            'model' => env('AUTH_MODEL', App\\Models\\User::class),\n+        ],\n+        // 'admins' => [\n+        //     'driver' => 'eloquent',\n+        //     'model' => env('AUTH_MODEL', App\\Models\\User::class),\n+        // ],\n+        // 'users' => [\n+        //     'driver' => 'database',\n+        //     'table' => 'users',\n+        // ],\n+    ],\n+\n+    /*\n+    |--------------------------------------------------------------------------\n+    | Resetting Passwords\n+    |--------------------------------------------------------------------------\n+    |\n+    | These configuration options specify the behavior of Laravel's password\n+    | reset functionality, including the table utilized for token storage\n+    | and the user provider that is invoked to actually retrieve users.\n+    |\n+    | The expiry time is the number of minutes that each reset token will be\n+    | considered valid. This security feature keeps tokens short-lived so\n+    | they have less time to be guessed. You may change this as needed.\n+    |\n+    | The throttle setting is the number of seconds a user must wait before\n+    | generating more password reset tokens. This prevents the user from\n+    | quickly generating a very large amount of password reset tokens.\n+    |\n+    */\n+\n+    'passwords' => [\n+        'users' => [\n+            'provider' => 'users',\n+            'table' => env('AUTH_PASSWORD_RESET_TOKEN_TABLE', 'password_reset_tokens'),\n+            'expire' => 60,\n+            'throttle' => 60,\n+        ],\n+    ],\n+\n+    /*\n+    |--------------------------------------------------------------------------\n+    | Password Confirmation Timeout\n+    |--------------------------------------------------------------------------\n+    |\n+    | Here you may define the amount of seconds before a password confirmation\n+    | window expires and users are asked to re-enter their password via the\n+    | confirmation screen. By default, the timeout lasts for three hours.\n+    |\n+    */\n+\n+    'password_timeout' => env('AUTH_PASSWORD_TIMEOUT', 10800),\n+\n+];\n"
                },
                {
                    "date": 1750587151601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,10 @@\n     'guards' => [\n         'web' => [\n             'driver' => 'session',\n             'provider' => 'users',\n-        ],'admin' => [\n+        ]\n+        ,'admin' => [\n             'driver' => 'session',\n             'provider' => 'admins',\n         ],\n     ],\n@@ -118,246 +119,4 @@\n \n     'password_timeout' => env('AUTH_PASSWORD_TIMEOUT', 10800),\n \n ];\n-<?php\n-\n-return [\n-\n-    /*\n-    |--------------------------------------------------------------------------\n-    | Authentication Defaults\n-    |--------------------------------------------------------------------------\n-    |\n-    | This option defines the default authentication \"guard\" and password\n-    | reset \"broker\" for your application. You may change these values\n-    | as required, but they're a perfect start for most applications.\n-    |\n-    */\n-\n-    'defaults' => [\n-        'guard' => env('AUTH_GUARD', 'web'),\n-        'passwords' => env('AUTH_PASSWORD_BROKER', 'users'),\n-    ],\n-\n-    /*\n-    |--------------------------------------------------------------------------\n-    | Authentication Guards\n-    |--------------------------------------------------------------------------\n-    |\n-    | Next, you may define every authentication guard for your application.\n-    | Of course, a great default configuration has been defined for you\n-    | which utilizes session storage plus the Eloquent user provider.\n-    |\n-    | All authentication guards have a user provider, which defines how the\n-    | users are actually retrieved out of your database or other storage\n-    | system used by the application. Typically, Eloquent is utilized.\n-    |\n-    | Supported: \"session\"\n-    |\n-    */\n-\n-    'guards' => [\n-        'web' => [\n-            'driver' => 'session',\n-            'provider' => 'users',\n-        ],'admin' => [\n-            'driver' => 'session',\n-            'provider' => 'admins',\n-        ],\n-    ],\n-\n-    /*\n-    |--------------------------------------------------------------------------\n-    | User Providers\n-    |--------------------------------------------------------------------------\n-    |\n-    | All authentication guards have a user provider, which defines how the\n-    | users are actually retrieved out of your database or other storage\n-    | system used by the application. Typically, Eloquent is utilized.\n-    |\n-    | If you have multiple user tables or models you may configure multiple\n-    | providers to represent the model / table. These providers may then\n-    | be assigned to any extra authentication guards you have defined.\n-    |\n-    | Supported: \"database\", \"eloquent\"\n-    |\n-    */\n-\n-    'providers' => [\n-        'users' => [\n-            'driver' => 'eloquent',\n-            'model' => env('AUTH_MODEL', App\\Models\\User::class),\n-        ],\n-        'admins' => [\n-            'driver' => 'eloquent',\n-            'model' => env('AUTH_MODEL', App\\Models\\User::class),\n-        ],\n-        // 'users' => [\n-        //     'driver' => 'database',\n-        //     'table' => 'users',\n-        // ],\n-    ],\n-\n-    /*\n-    |--------------------------------------------------------------------------\n-    | Resetting Passwords\n-    |--------------------------------------------------------------------------\n-    |\n-    | These configuration options specify the behavior of Laravel's password\n-    | reset functionality, including the table utilized for token storage\n-    | and the user provider that is invoked to actually retrieve users.\n-    |\n-    | The expiry time is the number of minutes that each reset token will be\n-    | considered valid. This security feature keeps tokens short-lived so\n-    | they have less time to be guessed. You may change this as needed.\n-    |\n-    | The throttle setting is the number of seconds a user must wait before\n-    | generating more password reset tokens. This prevents the user from\n-    | quickly generating a very large amount of password reset tokens.\n-    |\n-    */\n-\n-    'passwords' => [\n-        'users' => [\n-            'provider' => 'users',\n-            'table' => env('AUTH_PASSWORD_RESET_TOKEN_TABLE', 'password_reset_tokens'),\n-            'expire' => 60,\n-            'throttle' => 60,\n-        ],\n-    ],\n-\n-    /*\n-    |--------------------------------------------------------------------------\n-    | Password Confirmation Timeout\n-    |--------------------------------------------------------------------------\n-    |\n-    | Here you may define the amount of seconds before a password confirmation\n-    | window expires and users are asked to re-enter their password via the\n-    | confirmation screen. By default, the timeout lasts for three hours.\n-    |\n-    */\n-\n-    'password_timeout' => env('AUTH_PASSWORD_TIMEOUT', 10800),\n-\n-];\n-<?php\n-\n-return [\n-\n-    /*\n-    |--------------------------------------------------------------------------\n-    | Authentication Defaults\n-    |--------------------------------------------------------------------------\n-    |\n-    | This option defines the default authentication \"guard\" and password\n-    | reset \"broker\" for your application. You may change these values\n-    | as required, but they're a perfect start for most applications.\n-    |\n-    */\n-\n-    'defaults' => [\n-        'guard' => env('AUTH_GUARD', 'web'),\n-        'passwords' => env('AUTH_PASSWORD_BROKER', 'users'),\n-    ],\n-\n-    /*\n-    |--------------------------------------------------------------------------\n-    | Authentication Guards\n-    |--------------------------------------------------------------------------\n-    |\n-    | Next, you may define every authentication guard for your application.\n-    | Of course, a great default configuration has been defined for you\n-    | which utilizes session storage plus the Eloquent user provider.\n-    |\n-    | All authentication guards have a user provider, which defines how the\n-    | users are actually retrieved out of your database or other storage\n-    | system used by the application. Typically, Eloquent is utilized.\n-    |\n-    | Supported: \"session\"\n-    |\n-    */\n-\n-    'guards' => [\n-        'web' => [\n-            'driver' => 'session',\n-            'provider' => 'users',\n-        ],'admin' => [\n-            'driver' => 'session',\n-            'provider' => 'admins',\n-        ],\n-    ],\n-\n-    /*\n-    |--------------------------------------------------------------------------\n-    | User Providers\n-    |--------------------------------------------------------------------------\n-    |\n-    | All authentication guards have a user provider, which defines how the\n-    | users are actually retrieved out of your database or other storage\n-    | system used by the application. Typically, Eloquent is utilized.\n-    |\n-    | If you have multiple user tables or models you may configure multiple\n-    | providers to represent the model / table. These providers may then\n-    | be assigned to any extra authentication guards you have defined.\n-    |\n-    | Supported: \"database\", \"eloquent\"\n-    |\n-    */\n-\n-    'providers' => [\n-        'users' => [\n-            'driver' => 'eloquent',\n-            'model' => env('AUTH_MODEL', App\\Models\\User::class),\n-        ],\n-        'users' => [\n-            'driver' => 'eloquent',\n-            'model' => env('AUTH_MODEL', App\\Models\\User::class),\n-        ],\n-        // 'users' => [\n-        //     'driver' => 'database',\n-        //     'table' => 'users',\n-        // ],\n-    ],\n-\n-    /*\n-    |--------------------------------------------------------------------------\n-    | Resetting Passwords\n-    |--------------------------------------------------------------------------\n-    |\n-    | These configuration options specify the behavior of Laravel's password\n-    | reset functionality, including the table utilized for token storage\n-    | and the user provider that is invoked to actually retrieve users.\n-    |\n-    | The expiry time is the number of minutes that each reset token will be\n-    | considered valid. This security feature keeps tokens short-lived so\n-    | they have less time to be guessed. You may change this as needed.\n-    |\n-    | The throttle setting is the number of seconds a user must wait before\n-    | generating more password reset tokens. This prevents the user from\n-    | quickly generating a very large amount of password reset tokens.\n-    |\n-    */\n-\n-    'passwords' => [\n-        'users' => [\n-            'provider' => 'users',\n-            'table' => env('AUTH_PASSWORD_RESET_TOKEN_TABLE', 'password_reset_tokens'),\n-            'expire' => 60,\n-            'throttle' => 60,\n-        ],\n-    ],\n-\n-    /*\n-    |--------------------------------------------------------------------------\n-    | Password Confirmation Timeout\n-    |--------------------------------------------------------------------------\n-    |\n-    | Here you may define the amount of seconds before a password confirmation\n-    | window expires and users are asked to re-enter their password via the\n-    | confirmation screen. By default, the timeout lasts for three hours.\n-    |\n-    */\n-\n-    'password_timeout' => env('AUTH_PASSWORD_TIMEOUT', 10800),\n-\n-];\n"
                }
            ],
            "date": 1750188769863,
            "name": "Commit-0",
            "content": "<?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Authentication Defaults\n    |--------------------------------------------------------------------------\n    |\n    | This option defines the default authentication \"guard\" and password\n    | reset \"broker\" for your application. You may change these values\n    | as required, but they're a perfect start for most applications.\n    |\n    */\n\n    'defaults' => [\n        'guard' => env('AUTH_GUARD', 'web'),\n        'passwords' => env('AUTH_PASSWORD_BROKER', 'users'),\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Authentication Guards\n    |--------------------------------------------------------------------------\n    |\n    | Next, you may define every authentication guard for your application.\n    | Of course, a great default configuration has been defined for you\n    | which utilizes session storage plus the Eloquent user provider.\n    |\n    | All authentication guards have a user provider, which defines how the\n    | users are actually retrieved out of your database or other storage\n    | system used by the application. Typically, Eloquent is utilized.\n    |\n    | Supported: \"session\"\n    |\n    */\n\n    'guards' => [\n        'web' => [\n            'driver' => 'session',\n            'provider' => 'users',\n        ],'web' => [\n            'driver' => 'session',\n            'provider' => 'users',\n        ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | User Providers\n    |--------------------------------------------------------------------------\n    |\n    | All authentication guards have a user provider, which defines how the\n    | users are actually retrieved out of your database or other storage\n    | system used by the application. Typically, Eloquent is utilized.\n    |\n    | If you have multiple user tables or models you may configure multiple\n    | providers to represent the model / table. These providers may then\n    | be assigned to any extra authentication guards you have defined.\n    |\n    | Supported: \"database\", \"eloquent\"\n    |\n    */\n\n    'providers' => [\n        'users' => [\n            'driver' => 'eloquent',\n            'model' => env('AUTH_MODEL', App\\Models\\User::class),\n        ],\n\n        // 'users' => [\n        //     'driver' => 'database',\n        //     'table' => 'users',\n        // ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Resetting Passwords\n    |--------------------------------------------------------------------------\n    |\n    | These configuration options specify the behavior of Laravel's password\n    | reset functionality, including the table utilized for token storage\n    | and the user provider that is invoked to actually retrieve users.\n    |\n    | The expiry time is the number of minutes that each reset token will be\n    | considered valid. This security feature keeps tokens short-lived so\n    | they have less time to be guessed. You may change this as needed.\n    |\n    | The throttle setting is the number of seconds a user must wait before\n    | generating more password reset tokens. This prevents the user from\n    | quickly generating a very large amount of password reset tokens.\n    |\n    */\n\n    'passwords' => [\n        'users' => [\n            'provider' => 'users',\n            'table' => env('AUTH_PASSWORD_RESET_TOKEN_TABLE', 'password_reset_tokens'),\n            'expire' => 60,\n            'throttle' => 60,\n        ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Password Confirmation Timeout\n    |--------------------------------------------------------------------------\n    |\n    | Here you may define the amount of seconds before a password confirmation\n    | window expires and users are asked to re-enter their password via the\n    | confirmation screen. By default, the timeout lasts for three hours.\n    |\n    */\n\n    'password_timeout' => env('AUTH_PASSWORD_TIMEOUT', 10800),\n\n];\n"
        }
    ]
}